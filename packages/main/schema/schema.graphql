enum Disposition {
  inline
  attachment
}

type Account {
  id: ID!
  email: String!
  loggedIn: Boolean!
  conversations(label: String): [Conversation!]!
  messages: [Message!]!
  search(query: String!): Search!
}

type AccountMutations {
  create(email: String!): Account!
  authenticate(id: ID!): Account!
  delete(id: ID!): Boolean!
  sync(id: ID!): Account!
}

type Conversation {
  id: ID!
  date: String!
  from: Address!
  labels: [String!]

  """
  RFC 2822 Message ID of the first message in the conversation, if available.
  """
  messageId: String

  presentableElements: [Presentable!]!
  isRead: Boolean!
  isStarred: Boolean!
  replyRecipients(fromAccountId: ID!): Participants!
  snippet: String
  subject: String
}

type ConversationSearchResult {
  conversation: Conversation!
  query: String!
}

type ConversationMutations {
  archive(id: ID!): Conversation!
  flag(ids: [ID!]!, isFlagged: Boolean!): [Conversation!]!
  flagPresentable(
    id: ID!
    conversationId: ID!
    isFlagged: Boolean!
  ): Conversation!
  edit(
    accountId: ID!
    conversationId: ID!
    resource: PartSpecInput!
    revision: PartSpecInput!
    content: ContentInput!
  ): Conversation!
  reply(accountId: ID!, id: ID!, content: ContentInput!): Conversation!
  setIsRead(id: ID!, isRead: Boolean!): Conversation!
  sendMessage(accountId: ID!, message: MessageInput!): Conversation!
}

type Message {
  id: ID!
  date: String!
  messageId: ID!
  subject: String
  from: [Address!]!
}

input MessageInput {
  subject: String
  to: [AddressInput!]!
  content: ContentInput!
}

type Address {
  host: String!
  mailbox: String!
  name: String
}

input AddressInput {
  host: String!
  mailbox: String!
  name: String
}

type Participants {
  from: [Address!]
  to: [Address!]!
  cc: [Address!]!
  replyTo: [Address!]
}

type Presentable {
  id: ID!
  isRead: Boolean!
  isStarred: Boolean!
  contents: [Content!]!
  date: String!
  from: Address!
  editedAt: String
  editedBy: Address
}

type Content {
  resource: PartSpec!
  revision: PartSpec!
  disposition: Disposition!
  filename: String
  name: String
  type: String!
  subtype: String!
  content: String
}

input ContentInput {
  type: String!
  subtype: String!
  content: String!
}

type PartSpec {
  messageId: String!
  contentId: String
}

input PartSpecInput {
  messageId: String!
  contentId: String
}

type Search {
  id: ID!
  conversations: [Conversation!]!
  query: String!
}

type Mutation {
  accounts: AccountMutations!
  conversations: ConversationMutations!
}

type Query {
  account(id: ID!): Account
  accounts: [Account!]!
  addresses(inputValue: String!): [Address!]!
  conversation(id: ID!): Conversation
  conversations(
    query: String!
    """
    Ignore search results if the number of results exceeds
    `specificityThreshold`. The idea is that if there are too many results then
    the query is not specific enough.
    """
    specificityThreshold: Int
  ): [ConversationSearchResult!]!
}

schema {
  query: Query
  mutation: Mutation
}
